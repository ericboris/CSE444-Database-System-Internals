package simpledb;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * The predicate to use to join the children
     */
    private JoinPredicate p;

    /**
     * Iterator for the left(outer) relation to join
     */
    private OpIterator child1;

    /**
     * Iterator for the right(inner) relation to join
     */
    private OpIterator child2;

    /**
     * Map for hash join, when applicable
     */
    private ConcurrentHashMap<Field, ArrayList<Tuple>> child1Hash;

    /**
     * Holds the results of joined tuples.
     */
    private ConcurrentLinkedQueue<Tuple> outputBuffer;

    /**
     * Store the overflow.
     */
    private Tuple t1;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.child1.getTupleDesc(), this.child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();

        // Instantiate the hash and buffer.
        child1Hash = new ConcurrentHashMap<>();
        outputBuffer = new ConcurrentLinkedQueue<>();

        // Populate the hash.
        while (child1.hasNext()) {
            Tuple t1 = child1.next();
            Field f1 = t1.getField(p.getField1());
            if (!child1Hash.containsKey(f1)) {
                child1Hash.put(f1, new ArrayList<>());
            }
            child1Hash.get(f1).add(t1);
        }

        // Call up the chain.
        super.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // If it's not empty,
        // return the most recently added tuple to the buffer.
        if (!outputBuffer.isEmpty()) {
            return outputBuffer.poll();
        // Otherwise, if the predicate is EQUALS,
        // fill the buffer with merged tuples and return the last tuple.
        } else if (p.getOperator().equals(Predicate.Op.EQUALS)){
            while (child2.hasNext()){
                Tuple t2 = child2.next();
                Field f2 = t2.getField(p.getField2());
                if (child1Hash.containsKey (f2)){
                    for (Tuple t1 : child1Hash.get(f2)){
                        outputBuffer.offer(merged(t1, t2));
                    }
                    return outputBuffer.poll();
                }
            }
        // Otherwise, directly compute the new tuple.
        } else {
            while (child1.hasNext() || t1 != null) {
                if (child1.hasNext() && t1 == null) {
                    t1 = child1.next();
                }
                while (child2.hasNext()) {
                    Tuple t2 = child2.next();
                    if (p.filter(t1, t2)) {
                        return merged(t1, t2);
                    }
                }
                child2.rewind();
                t1 = null;
            }
        }
        // If all else fails, return null.
        return null;
    }

    /**
     * Return the result of merging Tuples t1 and t2.
     * @param t1
     * @param t2
     * @return
     */
    private Tuple merged(Tuple t1, Tuple t2) {
        Tuple result = new Tuple(TupleDesc.merge(t1.getTupleDesc(), t2.getTupleDesc()));
        for (int i = 0; i < result.getNumFields(); i++) {
            if (i < t1.getNumFields()) {
                result.setField(i, t1.getField(i));
            } else {
                result.setField(i, t2.getField(i - t1.getNumFields()));
            }
        }
        return result;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] {child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child1 = children[0];
        this.child2 = children[1];
    }
}
